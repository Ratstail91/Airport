//this is one layer
import standard;
import engine;
import node;


//util to generate and init a child node of a given parent
fn makeChildSprite(parent: opaque, spriteName: string) {
	var child: opaque = loadNode("scripts:/tilemap/tile.toy");
	parent.pushNode(child);
	child.initNode();

	child.loadTexture("sprites:/" + spriteName);

	return child;
}


fn onInit(node: opaque) {
	//load the child node, with the tiling back image
	node.makeChildSprite("tile-wall.png");
}


fn drawLayer(node: opaque, camX, camY, camW, camH, depth) {
	//get the constants from root
	var root: opaque = getRootNode();

	var tileWidth: int const = root.callNodeFn("getTileWidth");
	var tileHeight: int const = root.callNodeFn("getTileHeight");

	var roomWidth: int const = root.callNodeFn("getRoomWidth");
	var roomHeight: int const = root.callNodeFn("getRoomHeight");

	var levelXCount: int const = root.callNodeFn("getLevelXCount");
	var levelYCount: int const = root.callNodeFn("getLevelYCount");

	//calc the modifier ratio to offset things
	var mod: float = float tileWidth / (tileWidth - depth);

	var tileWidth_mod: int = round(tileWidth * mod);
	var tileHeight_mod: int = round(tileHeight * mod);
	var camX_mod: int = round((camX - camW) * mod + camW/2);
	var camY_mod: int = round((camY - camH) * mod + camH/2);

	//calc the region to render
	var lowerX: int = round((camX - camW/2.0) / tileWidth);
	var upperX: int = round((camX - camW*1.5) / tileWidth);
	var lowerY: int = round((camY - camH/2.0) / tileHeight);
	var upperY: int = round((camY - camH*1.5) / tileHeight);

	//bounds check
	lowerX = max(0, abs(lowerX));
	upperX = min(upperX < 0 ? abs(upperX) : 0, levelXCount * roomWidth);
	lowerY = max(0, abs(lowerY));
	upperY = min(upperY < 0 ? abs(upperY) : 0, levelYCount * roomHeight);

	//render each tile
	for (var j = lowerY; j <= upperY; j++) {
		for (var i = lowerX; i <= upperX; i++) {
			if ( !(int i % int roomWidth == 0 || int i % int roomWidth == roomWidth - 1) && !(int j % int roomHeight == 0 || int j % int roomHeight == roomHeight - 1) ) {
				continue;
			}

			node.getChildNode(0).drawNode(camX_mod + i * tileWidth_mod, camY_mod + j * tileHeight_mod, tileWidth_mod, tileHeight_mod);
		}
	}
}
