//this file manages the tilemap-related utilities
import standard;
import node;

var childCounter: int = 0;

var levelXCount: int const = 4;
var levelYCount: int const = 4;

var camX: float = 0;
var camY: float = 0;

//TODO: reference these from a global source (root?)
var tileWidth: float const = 100;
var tileHeight: float const = 100;

var roomWidth: float const = 10;
var roomHeight: float const = 10;

var screenWidth: float = 1080;
var screenHeight: float = 720;


//util to generate and init a child node of a given parent
fn makeChild(parent: opaque, fname: string) {
	var child: opaque = loadNode(fname);
	parent.pushNode(child);
	child.initNode();
	return child;
}

fn loadLayer(node: opaque, layerName: string) {
	//load the given layer as a child
	var layerNode = node.makeChild("scripts:/tilemap/" + layerName);
	childCounter++;
}

var stepCounter = 0;
fn onStep(node: opaque) {
	stepCounter++;

	camX--;
	camY--;
}

fn onDraw(node: opaque) {
	print stepCounter;
	stepCounter = 0;

	//iterate over each layer, passing in the screen dimensions
	for (var c = 0; c < childCounter; c++) {
		node.getNodeChild(c).callNodeFn("drawLayer", camX, camY, screenWidth, screenHeight, c * 2);
	}
}

//math utils
fn round(x): int {
	var f = floor(x);
	return x - f >= 0.5 ? f + 1 : f;
}

fn floor(x): int {
	return int x;
}

fn ceil(x): int {
	var f = floor(x);
	return x - f != 0 ? f + 1 : f;
}

fn min(a, b) {
	return a < b ? a : b;
}

fn max(a, b) {
	return a > b ? a : b;
}